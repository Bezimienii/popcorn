function baseIsEqualDeep(r,a,e,t,o,s,u){var g=isArray(r),y=isArray(a),l=arrayTag,b=arrayTag;g||(l=objToString.call(r),l==argsTag?l=objectTag:l!=objectTag&&(g=isTypedArray(r))),y||(b=objToString.call(a),b==argsTag?b=objectTag:b!=objectTag&&(y=isTypedArray(a)));var c=l==objectTag,i=b==objectTag,p=l==b;if(p&&!g&&!c)return equalByTag(r,a,l);if(!o){var T=c&&hasOwnProperty.call(r,"__wrapped__"),j=i&&hasOwnProperty.call(a,"__wrapped__");if(T||j)return e(T?r.value():r,j?a.value():a,t,o,s,u)}if(!p)return!1;s||(s=[]),u||(u=[]);for(var n=s.length;n--;)if(s[n]==r)return u[n]==a;s.push(r),u.push(a);var q=(g?equalArrays:equalObjects)(r,a,e,t,o,s,u);return s.pop(),u.pop(),q}var equalArrays=require("./equalArrays"),equalByTag=require("./equalByTag"),equalObjects=require("./equalObjects"),isArray=require("../lang/isArray"),isTypedArray=require("../lang/isTypedArray"),argsTag="[object Arguments]",arrayTag="[object Array]",objectTag="[object Object]",objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,objToString=objectProto.toString;module.exports=baseIsEqualDeep;