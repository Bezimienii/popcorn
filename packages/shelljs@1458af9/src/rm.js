function rmdirSyncRecursive(r,o){var e;e=fs.readdirSync(r);for(var c=0;c<e.length;c++){var i=r+"/"+e[c],n=fs.lstatSync(i);if(n.isDirectory())rmdirSyncRecursive(i,o);else if(n.isSymbolicLink()){if(o||isWriteable(i))try{common.unlinkSync(i)}catch(m){common.error("could not remove file (code "+m.code+"): "+i,!0)}}else if(o||isWriteable(i))try{common.unlinkSync(i)}catch(m){common.error("could not remove file (code "+m.code+"): "+i,!0)}}var s;try{s=fs.rmdirSync(r)}catch(m){common.error("could not remove directory (code "+m.code+"): "+r,!0)}return s}function isWriteable(r){var o=!0;try{var e=fs.openSync(r,"a");fs.closeSync(e)}catch(c){o=!1}return o}function _rm(r,o){r=common.parseOptions(r,{f:"force",r:"recursive",R:"recursive"}),o||common.error("no paths given"),"string"==typeof o&&(o=[].slice.call(arguments,1)),o=common.expand(o),o.forEach(function(o){if(!fs.existsSync(o))return void(r.force||common.error("no such file or directory: "+o,!0));var e=fs.lstatSync(o);return e.isFile()||e.isSymbolicLink()?r.force?void common.unlinkSync(o):void(isWriteable(o)?common.unlinkSync(o):common.error("permission denied: "+o,!0)):e.isDirectory()&&!r.recursive?void common.error("path is a directory",!0):void(e.isDirectory()&&r.recursive&&rmdirSyncRecursive(o,r.force))})}var common=require("./common"),fs=require("fs");module.exports=_rm;