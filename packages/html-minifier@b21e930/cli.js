"use strict";function fatal(e){console.error(e),process.exit(1)}function parseRegExp(e){if(e)return new RegExp(e.replace(/^\/(.*)\/$/,"$1"))}function parseJSON(e){if(e)try{return JSON.parse(e)}catch(t){return/^{/.test(e)&&fatal("Could not parse JSON value '"+e+"'"),e}}function parseJSONArray(e){if(e)return e=parseJSON(e),Array.isArray(e)?e:[e]}function parseJSONRegExpArray(e){return e=parseJSONArray(e),e&&e.map(parseRegExp)}function parseString(e){return e}function readFile(e){try{return fs.readFileSync(e,{encoding:"utf8"})}catch(t){fatal("Cannot read "+e+"\n"+t.message)}}function createOptions(){var e={};return mainOptionKeys.forEach(function(t){var r=program[camelCase(t)];"undefined"!=typeof r?e[t]=r:t in config&&(e[t]=config[t])}),e}function mkdir(e,t){fs.mkdir(e,function(r){if(r)switch(r.code){case"ENOENT":return mkdir(path.join(e,".."),function(){mkdir(e,t)});case"EEXIST":break;default:fatal("Cannot create directory "+e+"\n"+r.message)}t()})}function processFile(e,t){fs.readFile(e,{encoding:"utf8"},function(r,i){r&&fatal("Cannot read "+e+"\n"+r.message);var a;try{a=minify(i,createOptions())}catch(n){fatal("Minification error on "+e+"\n"+n.message)}fs.writeFile(t,a,{encoding:"utf8"},function(e){e&&fatal("Cannot write "+t+"\n"+e.message)})})}function processDirectory(e,t,r){fs.readdir(e,function(i,a){i&&fatal("Cannot read directory "+e+"\n"+i.message),a.forEach(function(i){var a=path.join(e,i),n=path.join(t,i);fs.stat(a,function(e,o){e?fatal("Cannot read "+a+"\n"+e.message):o.isDirectory()?processDirectory(a,n,r):r&&path.extname(i)!=="."+r||mkdir(t,function(){processFile(a,n)})})})})}function writeMinify(){var e;try{e=minify(content,createOptions())}catch(t){fatal("Minification error:\n"+t.message)}(program.output?fs.createWriteStream(program.output).on("error",function(e){fatal("Cannot write "+program.output+"\n"+e.message)}):process.stdout).write(e)}var camelCase=require("camel-case"),fs=require("fs"),info=require("./package.json"),minify=require("./"+info.main).minify,paramCase=require("param-case"),path=require("path"),program=require("commander");program._name=info.name,program.version(info.version);var mainOptions={caseSensitive:"Treat attributes in case sensitive manner (useful for SVG; e.g. viewBox)",collapseBooleanAttributes:"Omit attribute values from boolean attributes",collapseInlineTagWhitespace:"Collapse white space around inline tag",collapseWhitespace:"Collapse white space that contributes to text nodes in a document tree.",conservativeCollapse:"Always collapse to 1 space (never remove it entirely)",customAttrAssign:["Arrays of regex'es that allow to support custom attribute assign expressions (e.g. '<div flex?=\"{{mode != cover}}\"></div>')",parseJSONRegExpArray],customAttrCollapse:["Regex that specifies custom attribute to strip newlines from (e.g. /ng-class/)",parseRegExp],customAttrSurround:['Arrays of regex\'es that allow to support custom attribute surround expressions (e.g. <input {{#if value}}checked="checked"{{/if}}>)',parseJSONRegExpArray],customEventAttributes:["Arrays of regex'es that allow to support custom event attributes for minifyJS (e.g. ng-click)",parseJSONRegExpArray],decodeEntities:"Use direct Unicode characters whenever possible",html5:"Parse input according to HTML5 specifications",ignoreCustomComments:["Array of regex'es that allow to ignore certain comments, when matched",parseJSONRegExpArray],ignoreCustomFragments:["Array of regex'es that allow to ignore certain fragments, when matched (e.g. <?php ... ?>, {{ ... }})",parseJSONRegExpArray],includeAutoGeneratedTags:"Insert tags generated by HTML parser",keepClosingSlash:"Keep the trailing slash on singleton elements",maxLineLength:["Max line length",parseInt],minifyCSS:["Minify CSS in style elements and style attributes (uses clean-css)",parseJSON],minifyJS:["Minify Javascript in script elements and on* attributes (uses uglify-js)",parseJSON],minifyURLs:["Minify URLs in various attributes (uses relateurl)",parseJSON],preserveLineBreaks:"Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.",preventAttributesEscaping:"Prevents the escaping of the values of attributes.",processConditionalComments:"Process contents of conditional comments through minifier",processScripts:['Array of strings corresponding to types of script elements to process through minifier (e.g. "text/ng-template", "text/x-handlebars-template", etc.)',parseJSONArray],quoteCharacter:["Type of quote to use for attribute values (' or \")",parseString],removeAttributeQuotes:"Remove quotes around attributes when possible.",removeComments:"Strip HTML comments",removeEmptyAttributes:"Remove all attributes with whitespace-only values",removeEmptyElements:"Remove all elements with empty contents",removeOptionalTags:"Remove unrequired tags",removeRedundantAttributes:"Remove attributes when value matches default.",removeScriptTypeAttributes:'Remove type="text/javascript" from script tags. Other type attribute values are left intact.',removeStyleLinkTypeAttributes:'Remove type="text/css" from style and link tags. Other type attribute values are left intact.',removeTagWhitespace:"Remove space between attributes whenever possible",sortAttributes:"Sort attributes by frequency",sortClassName:"Sort style classes by frequency",trimCustomFragments:"Trim white space around ignoreCustomFragments.",useShortDoctype:"Replaces the doctype with the short (HTML5) doctype"},mainOptionKeys=Object.keys(mainOptions);mainOptionKeys.forEach(function(e){var t=mainOptions[e];if(e="--"+paramCase(e),Array.isArray(t)){var r=t[1]===parseJSON;program.option(e+(r?" [value]":" <value>"),t[0],t[1])}else program.option(e,t)}),program.option("-o --output <file>","Specify output file (if not specified STDOUT will be used for output)");var config={};program.option("-c --config-file <file>","Use config file",function(e){var t=readFile(e);try{config=JSON.parse(t)}catch(r){try{config=require(path.resolve(e))}catch(i){fatal("Cannot read the specified config file.\nAs JSON: "+r.message+"\nAs module: "+i.message)}}mainOptionKeys.forEach(function(e){if(e in config){var t=mainOptions[e];if(Array.isArray(t)){var r=config[e];config[e]=t[1]("string"==typeof r?r:JSON.stringify(r))}}})}),program.option("--input-dir <dir>","Specify an input directory"),program.option("--output-dir <dir>","Specify an output directory"),program.option("--file-ext <text>","Specify an extension to be read, ex: html");var content;program.arguments("[files...]").action(function(e){content=e.map(readFile).join("")}).parse(process.argv);var inputDir=program.inputDir,outputDir=program.outputDir,fileExt=program.fileExt;inputDir||outputDir?(inputDir?outputDir||fatal("You need to specify where to write the output files with the option --output-dir"):fatal("The option output-dir needs to be used with the option input-dir. If you are working with a single file, use -o."),processDirectory(inputDir,outputDir,fileExt)):"string"==typeof content?writeMinify():(content="",process.stdin.setEncoding("utf8"),process.stdin.on("data",function(e){content+=e}).on("end",writeMinify));