montageDefine("b21e930","cli",{dependencies:["camel-case","fs","./package.json","param-case","path","commander"],factory:function(e,t,n){"use strict";function r(e){console.error(e),process.exit(1)}function i(e){if(e)return new RegExp(e.replace(/^\/(.*)\/$/,"$1"))}function o(e){if(e)try{return JSON.parse(e)}catch(t){return/^{/.test(e)&&r("Could not parse JSON value '"+e+"'"),e}}function s(e){if(e)return e=o(e),Array.isArray(e)?e:[e]}function a(e){return e=s(e),e&&e.map(i)}function c(e){return e}function u(e){try{return h.readFileSync(e,{encoding:"utf8"})}catch(t){r("Cannot read "+e+"\n"+t.message)}}function p(){var e={};return x.forEach(function(t){var n=A[g(t)];"undefined"!=typeof n?e[t]=n:t in C&&(e[t]=C[t])}),e}function l(e,t){h.mkdir(e,function(n){if(n)switch(n.code){case"ENOENT":return l(w.join(e,".."),function(){l(e,t)});case"EEXIST":break;default:r("Cannot create directory "+e+"\n"+n.message)}t()})}function f(e,t){h.readFile(e,{encoding:"utf8"},function(n,i){n&&r("Cannot read "+e+"\n"+n.message);var o;try{o=v(i,p())}catch(s){r("Minification error on "+e+"\n"+s.message)}h.writeFile(t,o,{encoding:"utf8"},function(e){e&&r("Cannot write "+t+"\n"+e.message)})})}function m(e,t,n){h.readdir(e,function(i,o){i&&r("Cannot read directory "+e+"\n"+i.message),o.forEach(function(i){var o=w.join(e,i),s=w.join(t,i);h.stat(o,function(e,a){e?r("Cannot read "+o+"\n"+e.message):a.isDirectory()?m(o,s,n):n&&w.extname(i)!=="."+n||l(t,function(){f(o,s)})})})})}function d(){var e;try{e=v(T,p())}catch(t){r("Minification error:\n"+t.message)}(A.output?h.createWriteStream(A.output).on("error",function(e){r("Cannot write "+A.output+"\n"+e.message)}):process.stdout).write(e)}var g=e("camel-case"),h=e("fs"),y=e("./package.json"),v=e("./"+y.main).minify,b=e("param-case"),w=e("path"),A=e("commander");A._name=y.name,A.version(y.version);var S={caseSensitive:"Treat attributes in case sensitive manner (useful for SVG; e.g. viewBox)",collapseBooleanAttributes:"Omit attribute values from boolean attributes",collapseInlineTagWhitespace:"Collapse white space around inline tag",collapseWhitespace:"Collapse white space that contributes to text nodes in a document tree.",conservativeCollapse:"Always collapse to 1 space (never remove it entirely)",customAttrAssign:["Arrays of regex'es that allow to support custom attribute assign expressions (e.g. '<div flex?=\"{{mode != cover}}\"></div>')",a],customAttrCollapse:["Regex that specifies custom attribute to strip newlines from (e.g. /ng-class/)",i],customAttrSurround:['Arrays of regex\'es that allow to support custom attribute surround expressions (e.g. <input {{#if value}}checked="checked"{{/if}}>)',a],customEventAttributes:["Arrays of regex'es that allow to support custom event attributes for minifyJS (e.g. ng-click)",a],decodeEntities:"Use direct Unicode characters whenever possible",html5:"Parse input according to HTML5 specifications",ignoreCustomComments:["Array of regex'es that allow to ignore certain comments, when matched",a],ignoreCustomFragments:["Array of regex'es that allow to ignore certain fragments, when matched (e.g. <?php ... ?>, {{ ... }})",a],includeAutoGeneratedTags:"Insert tags generated by HTML parser",keepClosingSlash:"Keep the trailing slash on singleton elements",maxLineLength:["Max line length",parseInt],minifyCSS:["Minify CSS in style elements and style attributes (uses clean-css)",o],minifyJS:["Minify Javascript in script elements and on* attributes (uses uglify-js)",o],minifyURLs:["Minify URLs in various attributes (uses relateurl)",o],preserveLineBreaks:"Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.",preventAttributesEscaping:"Prevents the escaping of the values of attributes.",processConditionalComments:"Process contents of conditional comments through minifier",processScripts:['Array of strings corresponding to types of script elements to process through minifier (e.g. "text/ng-template", "text/x-handlebars-template", etc.)',s],quoteCharacter:["Type of quote to use for attribute values (' or \")",c],removeAttributeQuotes:"Remove quotes around attributes when possible.",removeComments:"Strip HTML comments",removeEmptyAttributes:"Remove all attributes with whitespace-only values",removeEmptyElements:"Remove all elements with empty contents",removeOptionalTags:"Remove unrequired tags",removeRedundantAttributes:"Remove attributes when value matches default.",removeScriptTypeAttributes:'Remove type="text/javascript" from script tags. Other type attribute values are left intact.',removeStyleLinkTypeAttributes:'Remove type="text/css" from style and link tags. Other type attribute values are left intact.',removeTagWhitespace:"Remove space between attributes whenever possible",sortAttributes:"Sort attributes by frequency",sortClassName:"Sort style classes by frequency",trimCustomFragments:"Trim white space around ignoreCustomFragments.",useShortDoctype:"Replaces the doctype with the short (HTML5) doctype"},x=Object.keys(S);x.forEach(function(e){var t=S[e];if(e="--"+b(e),Array.isArray(t)){var n=t[1]===o;A.option(e+(n?" [value]":" <value>"),t[0],t[1])}else A.option(e,t)}),A.option("-o --output <file>","Specify output file (if not specified STDOUT will be used for output)");var C={};A.option("-c --config-file <file>","Use config file",function(t){var n=u(t);try{C=JSON.parse(n)}catch(i){try{C=e(w.resolve(t))}catch(o){r("Cannot read the specified config file.\nAs JSON: "+i.message+"\nAs module: "+o.message)}}x.forEach(function(e){if(e in C){var t=S[e];if(Array.isArray(t)){var n=C[e];C[e]=t[1]("string"==typeof n?n:JSON.stringify(n))}}})}),A.option("--input-dir <dir>","Specify an input directory"),A.option("--output-dir <dir>","Specify an output directory"),A.option("--file-ext <text>","Specify an extension to be read, ex: html");var T;A.arguments("[files...]").action(function(e){T=e.map(u).join("")}).parse(process.argv);var E=A.inputDir,k=A.outputDir,R=A.fileExt;E||k?(E?k||r("You need to specify where to write the output files with the option --output-dir"):r("The option output-dir needs to be used with the option input-dir. If you are working with a single file, use -o."),m(E,k,R)):"string"==typeof T?d():(T="",process.stdin.setEncoding("utf8"),process.stdin.on("data",function(e){T+=e}).on("end",d))}});