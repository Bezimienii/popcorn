function log(e,t){console.log("OfflineWorker",e,DEBUG?t:void 0)}function postMessage(e){return DEBUG&&log("postMessage",e),self.clients.matchAll().then(function(t){return Promise.all(t.map(function(t){return t.postMessage(e)}))})}function parseAppCache(e){var t={rev:"",cache:[],network:[]},n=null;return e.split("\n").forEach(function(e){if(e)if(cacheSections.indexOf(e)!==-1)n=e;else if("CACHE MANIFEST"===n)if(0===e.indexOf("#")){var r=String(e||"").split(" ");r[0]&&r[1]&&e.indexOf(r[0])!==-1&&(t.rev+=t[r[0].replace("#")]=r[1])}else t.cache.push(e);else"CACHE:"===n?t.cache.push(e):"NETWORK:"===n&&t.network.push(e)}),t}function getAppCache(){return new Promise(function(e,t){log("Fetch cache manifest..."),postMessage("Updating"),fetch("./manifest.appcache").then(function(n){return 200===n.status?n.text().then(function(t){var n=parseAppCache(t);log("AppCache.rev: "+n.rev),e(n)},t):void t("NoAppCache")},function(e){log("Fetch cache manifest failed cause: "+e),t(e)})})}function getStorage(){return new Promise(function(e,t){var n=indexedDB.open(dbName,1);n.onupgradeneeded=function(){var e=n.result,t=e.createObjectStore(storeName,{keyPath:"key"});t.createIndex("KeyIndex",["key"])},n.onblocked=function(e){e.target.result&&e.target.result.close(),t(e.target.error||"OpenBlocked")},n.onerror=function(e){t(e.target.error||"OpenError")},n.onsuccess=function(){e(n.result)}})}function getStorageValue(e){return getStorage().then(function(t){var n=t.transaction(storeName,"readwrite"),r=n.objectStore(storeName);return new Promise(function(t,n){var o=r.get(e);o.onsuccess=function(e){var n=e.target.result;t("undefined"!=typeof n&&"string"==typeof n.value?n.value:null)},o.onerror=function(e){t(e.target.error)}})["finally"](function(){t.close()})})}function setStorageValue(e,t){return getStorage().then(function(n){var r=n.transaction(storeName,"readwrite"),o=r.objectStore(storeName);return new Promise(function(n,r){var a=o.put({key:e,value:t});a.onerror=function(e){n(e.target.error)},a.onsuccess=function(e){n(e.target.result)}})["finally"](function(){n.close()})})}function setAppVersion(e){return setStorageValue(CACHE_KEY,e)}function getAppVersion(){return getStorageValue(CACHE_KEY).then(function(e){return log("App.rev: "+e),e})}function clearCache(e){return caches.keys().then(function(e){return Promise.all(e.map(function(e){return caches["delete"](e)}))})}function pushCache(e,t){return caches.open(e).then(function(n){return n.addAll(t).then(function(){return log('Updated cache version "'+e+'" urls ('+t.length+")",t),e})})}function updateCache(){return pendingCacheUpdate?pendingCacheUpdate:(pendingCacheUpdate=getAppCache()).then(function(e){return getAppVersion().then(function(t){return new Promise(function(n,r){return null===t?(log('Installing "'+e.rev+'"'),pushCache(e.rev,e.cache).then(function(){return log('Installed "'+e.rev+'"'),setAppVersion(e.rev)})):t===e.rev?(log('Cached "'+e.rev+'"'),r("Cached")):(log('Updating to "'+e.rev+'"'),void clearCache(t).then(function(){return pushCache(e.rev,e.cache).then(function(){return log('Updated from "'+t+'" to "'+e.rev+'"'),setAppVersion(e.rev)})}).then(n,r))})})})["finally"](function(){pendingCacheUpdate=null})}var CACHE_KEY="cacheVersion",DEBUG=!1;Promise.prototype["finally"]=function(e){var t=this.constructor;return this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.resolve(e()).then(function(){throw n})})};var cacheSections=["CACHE MANIFEST","CACHE:","NETWORK:"],cacheVersionSections=["#version","#hash"],dbName="OfflineWorker",storeName="OfflineObjectStore",pendingCacheUpdate;log("Started",self),postMessage("Started"),self.addEventListener("install",function(e){log("Install...",e),e.waitUntil(updateCache().then(function(){return self.skipWaiting()}).then(function(e){return postMessage("Installed")},function(){return postMessage("InstallFailed")}))}),self.addEventListener("activate",function(e){log("Activating...",e),e.waitUntil(updateCache().then(function(e){return postMessage("Updated")})["catch"](function(e){return log("No Update cause: "+e),postMessage("NoUpdate")}).then(function(){return clients.claim()}))}),self.addEventListener("message",function(e){log("Checking...",e),e.waitUntil(updateCache().then(function(e){return postMessage("Updated")})["catch"](function(e){return log("No Update cause: "+e),postMessage("NoUpdate")}))}),self.addEventListener("sync",function(e){log("Push event received",e)}),self.addEventListener("push",function(e){log("Push event received",e)}),self.addEventListener("update",function(e){log("Update event received",e)}),self.addEventListener("fetch",function(e){e.request.url.startsWith(self.location.origin)&&e.respondWith(caches.match(e.request).then(function(t){return t?t:fetch(e.request)}))});